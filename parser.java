
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Oct 16 11:25:49 GMT-03:00 2010
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.10k generated parser.
  * @version Sat Oct 16 11:25:49 GMT-03:00 2010
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\025\002\000\002\003\005\000\002\002" +
    "\004\000\002\004\005\000\002\004\004\000\002\005\006" +
    "\000\002\005\003\000\002\005\004\000\002\006\005\000" +
    "\002\006\006\000\002\007\004\000\002\007\004\000\002" +
    "\010\005\000\002\011\005\000\002\011\003\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\003\000" +
    "\002\013\005\000\002\013\003\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\003\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\003\000" +
    "\002\016\004\000\002\016\004\000\002\016\003\000\002" +
    "\017\004\000\002\017\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\005\000\002\020\003\000\002\020\003\000" +
    "\002\021\007\000\002\022\005\000\002\022\003\000\002" +
    "\023\005\000\002\024\005\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\030\027\001\030\001\031\001\033\001\035" +
    "\001\036\001\037\001\040\001\041\001\042\001\043\001" +
    "\001\002\000\030\027\012\030\024\031\027\033\033\035" +
    "\014\036\034\037\010\040\015\041\011\042\031\043\017" +
    "\001\002\000\004\002\006\001\002\000\004\002\uffff\001" +
    "\002\000\070\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2" +
    "\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2" +
    "\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\040\uffd2\041" +
    "\uffd2\042\uffd2\043\uffd2\001\002\000\004\040\142\001\002" +
    "\000\070\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\040\uffd9\041\uffd9" +
    "\042\uffd9\043\uffd9\001\002\000\020\031\027\033\033\035" +
    "\014\040\015\041\011\042\031\043\017\001\002\000\032" +
    "\004\136\027\012\030\024\031\027\033\033\035\014\036" +
    "\034\037\010\040\015\041\011\042\031\043\017\001\002" +
    "\000\070\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012" +
    "\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5" +
    "\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\031" +
    "\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\040\uffd5\041\uffd5" +
    "\042\uffd5\043\uffd5\001\002\000\070\005\uffd6\006\uffd6\007" +
    "\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024" +
    "\uffd6\025\uffd6\026\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\001\002\000" +
    "\020\005\ufffb\006\046\010\047\011\044\012\050\013\045" +
    "\014\051\001\002\000\070\005\uffd7\006\uffd7\007\uffd7\010" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7" +
    "\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7" +
    "\040\uffd7\041\uffd7\042\uffd7\043\uffd7\001\002\000\052\005" +
    "\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf" +
    "\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\032\uffdf\034\uffdf" +
    "\001\002\000\040\005\uffea\006\uffea\007\uffea\010\uffea\011" +
    "\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\057\017\055" +
    "\020\056\021\060\032\uffea\034\uffea\001\002\000\004\005" +
    "\135\001\002\000\070\005\uffda\006\uffda\007\uffda\010\uffda" +
    "\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017" +
    "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda" +
    "\026\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\040" +
    "\uffda\041\uffda\042\uffda\043\uffda\001\002\000\020\031\027" +
    "\033\033\035\014\040\015\041\011\042\031\043\017\001" +
    "\002\000\030\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec" +
    "\012\uffec\013\uffec\014\uffec\015\053\032\uffec\034\uffec\001" +
    "\002\000\070\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3" +
    "\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\040\uffd3\041" +
    "\uffd3\042\uffd3\043\uffd3\001\002\000\024\027\012\030\024" +
    "\031\027\033\033\035\014\040\015\041\011\042\031\043" +
    "\017\001\002\000\052\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\066\023\065\024\062\025\063" +
    "\026\064\032\uffe5\034\uffe5\001\002\000\070\005\uffd8\006" +
    "\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8" +
    "\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\031\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\035\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\001" +
    "\002\000\070\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\031\027\032\uffdc\033\033\034\uffdc\035\014\040\015\041" +
    "\011\042\031\043\017\001\002\000\024\027\012\030\024" +
    "\031\027\033\033\035\014\040\015\041\011\042\031\043" +
    "\017\001\002\000\004\040\035\001\002\000\006\031\040" +
    "\040\037\001\002\000\004\005\ufffa\001\002\000\006\006" +
    "\112\040\111\001\002\000\004\040\104\001\002\000\004" +
    "\006\042\001\002\000\024\027\012\030\024\031\027\033" +
    "\033\035\014\040\015\041\011\042\031\043\017\001\002" +
    "\000\020\005\ufff8\006\046\010\047\011\044\012\050\013" +
    "\045\014\051\001\002\000\024\027\012\030\024\031\027" +
    "\033\033\035\014\040\015\041\011\042\031\043\017\001" +
    "\002\000\024\027\012\030\024\031\027\033\033\035\014" +
    "\040\015\041\011\042\031\043\017\001\002\000\024\027" +
    "\012\030\024\031\027\033\033\035\014\040\015\041\011" +
    "\042\031\043\017\001\002\000\024\027\012\030\024\031" +
    "\027\033\033\035\014\040\015\041\011\042\031\043\017" +
    "\001\002\000\024\027\012\030\024\031\027\033\033\035" +
    "\014\040\015\041\011\042\031\043\017\001\002\000\024" +
    "\027\012\030\024\031\027\033\033\035\014\040\015\041" +
    "\011\042\031\043\017\001\002\000\030\005\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015" +
    "\053\032\ufff1\034\ufff1\001\002\000\024\027\012\030\024" +
    "\031\027\033\033\035\014\040\015\041\011\042\031\043" +
    "\017\001\002\000\040\005\uffeb\006\uffeb\007\uffeb\010\uffeb" +
    "\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\057\017" +
    "\055\020\056\021\060\032\uffeb\034\uffeb\001\002\000\024" +
    "\027\012\030\024\031\027\033\033\035\014\040\015\041" +
    "\011\042\031\043\017\001\002\000\024\027\012\030\024" +
    "\031\027\033\033\035\014\040\015\041\011\042\031\043" +
    "\017\001\002\000\024\027\012\030\024\031\027\033\033" +
    "\035\014\040\015\041\011\042\031\043\017\001\002\000" +
    "\024\027\012\030\024\031\027\033\033\035\014\040\015" +
    "\041\011\042\031\043\017\001\002\000\052\005\uffe6\006" +
    "\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\066\023" +
    "\065\024\062\025\063\026\064\032\uffe6\034\uffe6\001\002" +
    "\000\024\027\012\030\024\031\027\033\033\035\014\040" +
    "\015\041\011\042\031\043\017\001\002\000\024\027\012" +
    "\030\024\031\027\033\033\035\014\040\015\041\011\042" +
    "\031\043\017\001\002\000\024\027\012\030\024\031\027" +
    "\033\033\035\014\040\015\041\011\042\031\043\017\001" +
    "\002\000\024\027\012\030\024\031\027\033\033\035\014" +
    "\040\015\041\011\042\031\043\017\001\002\000\024\027" +
    "\012\030\024\031\027\033\033\035\014\040\015\041\011" +
    "\042\031\043\017\001\002\000\052\005\uffe4\006\uffe4\007" +
    "\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\032\uffe4\034\uffe4\001\002\000\052" +
    "\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013" +
    "\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\032\uffe3\034" +
    "\uffe3\001\002\000\052\005\uffe0\006\uffe0\007\uffe0\010\uffe0" +
    "\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017" +
    "\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\032\uffe0\034\uffe0\001\002\000\052\005\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\026\uffe1\032\uffe1\034\uffe1\001\002" +
    "\000\052\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\032" +
    "\uffe2\034\uffe2\001\002\000\052\005\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016" +
    "\uffe9\017\uffe9\020\uffe9\021\uffe9\022\066\023\065\024\062" +
    "\025\063\026\064\032\uffe9\034\uffe9\001\002\000\052\005" +
    "\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7" +
    "\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022" +
    "\066\023\065\024\062\025\063\026\064\032\uffe7\034\uffe7" +
    "\001\002\000\052\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\022\066\023\065\024\062\025\063\026" +
    "\064\032\uffe8\034\uffe8\001\002\000\030\005\ufff2\006\ufff2" +
    "\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015" +
    "\053\032\ufff2\034\ufff2\001\002\000\030\005\uffee\006\uffee" +
    "\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015" +
    "\053\032\uffee\034\uffee\001\002\000\030\005\uffed\006\uffed" +
    "\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015" +
    "\053\032\uffed\034\uffed\001\002\000\030\005\uffef\006\uffef" +
    "\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015" +
    "\053\032\uffef\034\uffef\001\002\000\030\005\ufff0\006\ufff0" +
    "\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015" +
    "\053\032\ufff0\034\ufff0\001\002\000\006\007\ufff3\032\ufff3" +
    "\001\002\000\006\007\107\032\106\001\002\000\004\006" +
    "\ufff5\001\002\000\004\040\110\001\002\000\006\007\ufff4" +
    "\032\ufff4\001\002\000\006\006\112\040\111\001\002\000" +
    "\024\027\012\030\024\031\027\033\033\035\014\040\015" +
    "\041\011\042\031\043\017\001\002\000\004\005\ufff9\001" +
    "\002\000\020\005\ufff6\006\046\010\047\011\044\012\050" +
    "\013\045\014\051\001\002\000\004\005\ufff7\001\002\000" +
    "\022\006\046\007\uffcc\010\047\011\044\012\050\013\045" +
    "\014\051\034\uffcc\001\002\000\006\007\120\034\121\001" +
    "\002\000\024\027\012\030\024\031\027\033\033\035\014" +
    "\040\015\041\011\042\031\043\017\001\002\000\070\005" +
    "\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce" +
    "\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022" +
    "\uffce\023\uffce\024\uffce\025\uffce\026\uffce\031\uffce\032\uffce" +
    "\033\uffce\034\uffce\035\uffce\040\uffce\041\uffce\042\uffce\043" +
    "\uffce\001\002\000\022\006\046\007\uffcd\010\047\011\044" +
    "\012\050\013\045\014\051\034\uffcd\001\002\000\070\005" +
    "\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\031\uffdb\032\uffdb" +
    "\033\uffdb\034\uffdb\035\uffdb\040\uffdb\041\uffdb\042\uffdb\043" +
    "\uffdb\001\002\000\022\006\046\007\126\010\047\011\044" +
    "\012\050\013\045\014\051\032\125\001\002\000\070\005" +
    "\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\031\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\035\uffd4\040\uffd4\041\uffd4\042\uffd4\043" +
    "\uffd4\001\002\000\024\027\012\030\024\031\027\033\033" +
    "\035\014\040\015\041\011\042\031\043\017\001\002\000" +
    "\006\007\132\032\131\001\002\000\022\006\046\007\uffcf" +
    "\010\047\011\044\012\050\013\045\014\051\032\uffcf\001" +
    "\002\000\070\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1" +
    "\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\040\uffd1\041" +
    "\uffd1\042\uffd1\043\uffd1\001\002\000\024\027\012\030\024" +
    "\031\027\033\033\035\014\040\015\041\011\042\031\043" +
    "\017\001\002\000\022\006\046\007\uffd0\010\047\011\044" +
    "\012\050\013\045\014\051\032\uffd0\001\002\000\070\005" +
    "\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd" +
    "\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\031\027\032\uffdd" +
    "\033\033\034\uffdd\035\014\040\015\041\011\042\031\043" +
    "\017\001\002\000\032\004\ufffd\027\ufffd\030\ufffd\031\ufffd" +
    "\033\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042" +
    "\ufffd\043\ufffd\001\002\000\004\002\000\001\002\000\004" +
    "\005\140\001\002\000\032\004\ufffe\027\ufffe\030\ufffe\031" +
    "\ufffe\033\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe" +
    "\042\ufffe\043\ufffe\001\002\000\070\005\uffde\006\uffde\007" +
    "\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde" +
    "\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\031\027\032\uffde\033\033\034\uffde" +
    "\035\014\040\015\041\011\042\031\043\017\001\002\000" +
    "\004\006\143\001\002\000\024\027\012\030\024\031\027" +
    "\033\033\035\014\040\015\041\011\042\031\043\017\001" +
    "\002\000\020\005\ufffc\006\046\010\047\011\044\012\050" +
    "\013\045\014\051\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\006\003\004\025\003\001\001\000\030\004" +
    "\012\005\021\012\015\013\024\014\020\015\027\016\017" +
    "\017\031\020\022\021\025\023\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\017\140\020\022\021\025\023" +
    "\006\001\001\000\026\005\136\012\015\013\024\014\020" +
    "\015\027\016\017\017\031\020\022\021\025\023\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\133\020\022" +
    "\021\025\023\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\012\123\013\024\014\020\015\027\016\017" +
    "\017\031\020\022\021\025\023\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\122\021\025\023\006" +
    "\001\001\000\026\012\115\013\024\014\020\015\027\016" +
    "\017\017\031\020\022\021\025\023\006\024\116\001\001" +
    "\000\004\006\035\001\001\000\004\010\040\001\001\000" +
    "\002\001\001\000\004\007\112\001\001\000\004\011\104" +
    "\001\001\000\002\001\001\000\024\012\042\013\024\014" +
    "\020\015\027\016\017\017\031\020\022\021\025\023\006" +
    "\001\001\000\002\001\001\000\022\013\102\014\020\015" +
    "\027\016\017\017\031\020\022\021\025\023\006\001\001" +
    "\000\022\013\101\014\020\015\027\016\017\017\031\020" +
    "\022\021\025\023\006\001\001\000\022\013\100\014\020" +
    "\015\027\016\017\017\031\020\022\021\025\023\006\001" +
    "\001\000\022\013\077\014\020\015\027\016\017\017\031" +
    "\020\022\021\025\023\006\001\001\000\022\013\076\014" +
    "\020\015\027\016\017\017\031\020\022\021\025\023\006" +
    "\001\001\000\022\013\051\014\020\015\027\016\017\017" +
    "\031\020\022\021\025\023\006\001\001\000\002\001\001" +
    "\000\020\014\053\015\027\016\017\017\031\020\022\021" +
    "\025\023\006\001\001\000\002\001\001\000\016\015\075" +
    "\016\017\017\031\020\022\021\025\023\006\001\001\000" +
    "\016\015\074\016\017\017\031\020\022\021\025\023\006" +
    "\001\001\000\016\015\073\016\017\017\031\020\022\021" +
    "\025\023\006\001\001\000\016\015\060\016\017\017\031" +
    "\020\022\021\025\023\006\001\001\000\002\001\001\000" +
    "\014\016\072\017\031\020\022\021\025\023\006\001\001" +
    "\000\014\016\071\017\031\020\022\021\025\023\006\001" +
    "\001\000\014\016\070\017\031\020\022\021\025\023\006" +
    "\001\001\000\014\016\067\017\031\020\022\021\025\023" +
    "\006\001\001\000\014\016\066\017\031\020\022\021\025" +
    "\023\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\114\001\001\000\024\012\113\013\024\014\020\015" +
    "\027\016\017\017\031\020\022\021\025\023\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\012\121\013\024" +
    "\014\020\015\027\016\017\017\031\020\022\021\025\023" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\012" +
    "\127\013\024\014\020\015\027\016\017\017\031\020\022" +
    "\021\025\022\126\023\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\012\132\013\024" +
    "\014\020\015\027\016\017\017\031\020\022\021\025\023" +
    "\006\001\001\000\002\001\001\000\010\020\122\021\025" +
    "\023\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\122\021\025" +
    "\023\006\001\001\000\002\001\001\000\024\012\143\013" +
    "\024\014\020\015\027\016\017\017\031\020\022\021\025" +
    "\023\006\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[])
	{
		try
		{
			new parser(new Yylex(System.in)).parse();
		}
		catch (Exception e)
		{
			System.err.println(e.getMessage());
		}
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	Hashtable symbolTable;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // List2 ::= Exp_Rel 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*List2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // List2 ::= List2 COMA Exp_Rel 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*List2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // List ::= CORABRE List2 CORCIERRA 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*List*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Tuple2 ::= Exp_Rel 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*Tuple2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Tuple2 ::= Tuple2 COMA Exp_Rel 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*Tuple2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Tuple ::= PARABRE Exp_Rel COMA Tuple2 PARCIERRA 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*Tuple*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Exp_atom ::= List 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp_atom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Exp_atom ::= Tuple 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp_atom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp_atom ::= PARABRE Exp_Rel PARCIERRA 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp_atom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp_atom ::= NIL 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp_atom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp_atom ::= ID 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp_atom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp_atom ::= STRING 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp_atom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp_atom ::= REAL 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp_atom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp_atom ::= INT 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp_atom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp_fun ::= Exp_atom 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp_fun*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp_fun ::= Exp_fun Exp_atom 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp_fun*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp_un ::= Exp_fun 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*Exp_un*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp_un ::= MINUS Exp_fun 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*Exp_un*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp_un ::= NOT Exp_fun 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*Exp_un*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp_mul ::= Exp_un 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp_mul*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp_mul ::= Exp_mul ANDALSO Exp_un 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp_mul*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp_mul ::= Exp_mul MOD Exp_un 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp_mul*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp_mul ::= Exp_mul DIVINT Exp_un 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp_mul*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp_mul ::= Exp_mul DIVREAL Exp_un 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp_mul*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp_mul ::= Exp_mul MUL Exp_un 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp_mul*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp_add ::= Exp_mul 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*Exp_add*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp_add ::= Exp_add CONCAT Exp_mul 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*Exp_add*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp_add ::= Exp_add ORELSE Exp_mul 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*Exp_add*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp_add ::= Exp_add RESTA Exp_mul 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*Exp_add*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp_add ::= Exp_add SUMA Exp_mul 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*Exp_add*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp_cons ::= Exp_add 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*Exp_cons*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Exp_cons ::= Exp_cons CONS Exp_add 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*Exp_cons*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Exp_Rel ::= Exp_cons 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*Exp_Rel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Exp_Rel ::= Exp_Rel IGUAL Exp_cons 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*Exp_Rel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Exp_Rel ::= Exp_Rel DISTINTO Exp_cons 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*Exp_Rel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Exp_Rel ::= Exp_Rel MAYORIGUAL Exp_cons 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*Exp_Rel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Exp_Rel ::= Exp_Rel MENORIGUAL Exp_cons 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*Exp_Rel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Exp_Rel ::= Exp_Rel MAYOR Exp_cons 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*Exp_Rel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Exp_Rel ::= Exp_Rel MENOR Exp_cons 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*Exp_Rel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TuplePattern2 ::= ID 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*TuplePattern2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TuplePattern2 ::= TuplePattern2 COMA ID 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*TuplePattern2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TuplePattern ::= PARABRE TuplePattern2 PARCIERRA 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*TuplePattern*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CurryingList ::= IGUAL Exp_Rel 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*CurryingList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CurryingList ::= ID CurryingList 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*CurryingList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MatchingFunc ::= ID TuplePattern IGUAL Exp_Rel 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*MatchingFunc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MatchingFunc ::= ID ID CurryingList 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*MatchingFunc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Sentencia ::= FUN MatchingFunc 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Sentencia ::= Exp_Rel 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Sentencia ::= VAL ID IGUAL Exp_Rel 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Lista_sentencias ::= Sentencia PTOCOMA 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*Lista_sentencias*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Lista_sentencias ::= Lista_sentencias Sentencia PTOCOMA 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*Lista_sentencias*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Programa EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= NT$0 Lista_sentencias PUNTO 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*Programa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT = null;
 	symbolTable=new Hashtable(); 
					System.out.println("Succesfully created symbol table!"); 
				
              CUP$parser$result = new java_cup.runtime.Symbol(19/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

