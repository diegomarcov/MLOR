
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Oct 16 17:20:29 GMT-03:00 2010
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.10k generated parser.
  * @version Sat Oct 16 17:20:29 GMT-03:00 2010
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\025\002\000\002\003\004\000\002\002" +
    "\004\000\002\026\002\000\002\027\002\000\002\003\006" +
    "\000\002\004\005\000\002\030\002\000\002\004\005\000" +
    "\002\031\002\000\002\032\002\000\002\033\002\000\002" +
    "\005\011\000\002\005\003\000\002\005\004\000\002\006" +
    "\005\000\002\006\006\000\002\007\004\000\002\007\004" +
    "\000\002\010\005\000\002\011\005\000\002\011\003\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\003\000\002\013\005\000\002\013\003\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\003\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\003\000\002\016\004\000\002\016\004\000\002\016\003" +
    "\000\002\017\004\000\002\017\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\005\000\002\020\003\000\002\020" +
    "\003\000\002\021\007\000\002\022\005\000\002\022\003" +
    "\000\002\023\005\000\002\024\005\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\032\004\001\027\ufffe\030\ufffe\031\ufffe\033" +
    "\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe" +
    "\043\ufffe\001\002\000\030\027\ufffa\030\ufffa\031\ufffa\033" +
    "\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa" +
    "\043\ufffa\001\002\000\004\004\010\001\002\000\004\002" +
    "\007\001\002\000\004\002\uffff\001\002\000\004\002\000" +
    "\001\002\000\030\027\016\030\031\031\033\033\037\035" +
    "\020\036\040\037\014\040\021\041\015\042\035\043\023" +
    "\001\002\000\032\004\ufffd\027\016\030\031\031\033\033" +
    "\037\035\020\036\040\037\014\040\021\041\015\042\035" +
    "\043\023\001\002\000\070\005\uffcb\006\uffcb\007\uffcb\010" +
    "\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb" +
    "\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb" +
    "\040\uffcb\041\uffcb\042\uffcb\043\uffcb\001\002\000\004\040" +
    "\ufff8\001\002\000\070\005\uffd2\006\uffd2\007\uffd2\010\uffd2" +
    "\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017" +
    "\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\043\uffd2\001\002\000\020\031\033" +
    "\033\037\035\020\040\021\041\015\042\035\043\023\001" +
    "\002\000\004\004\142\001\002\000\070\005\uffce\006\uffce" +
    "\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce" +
    "\024\uffce\025\uffce\026\uffce\031\uffce\032\uffce\033\uffce\034" +
    "\uffce\035\uffce\040\uffce\041\uffce\042\uffce\043\uffce\001\002" +
    "\000\070\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012" +
    "\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\040\uffcf\041\uffcf" +
    "\042\uffcf\043\uffcf\001\002\000\020\005\ufff4\006\052\010" +
    "\053\011\051\012\054\013\050\014\055\001\002\000\070" +
    "\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\040\uffd0\041\uffd0\042\uffd0" +
    "\043\uffd0\001\002\000\052\005\uffd8\006\uffd8\007\uffd8\010" +
    "\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025" +
    "\uffd8\026\uffd8\032\uffd8\034\uffd8\001\002\000\040\005\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014" +
    "\uffe3\015\uffe3\016\063\017\062\020\061\021\064\032\uffe3" +
    "\034\uffe3\001\002\000\070\005\uffd3\006\uffd3\007\uffd3\010" +
    "\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025" +
    "\uffd3\026\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3" +
    "\040\uffd3\041\uffd3\042\uffd3\043\uffd3\001\002\000\004\005" +
    "\141\001\002\000\030\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\057\032\uffe5\034" +
    "\uffe5\001\002\000\020\031\033\033\037\035\020\040\021" +
    "\041\015\042\035\043\023\001\002\000\070\005\uffcc\006" +
    "\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc" +
    "\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\031\uffcc\032\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\001" +
    "\002\000\024\027\016\030\031\031\033\033\037\035\020" +
    "\040\021\041\015\042\035\043\023\001\002\000\052\005" +
    "\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde" +
    "\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022" +
    "\072\023\071\024\067\025\066\026\070\032\uffde\034\uffde" +
    "\001\002\000\070\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026" +
    "\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\040\uffd1" +
    "\041\uffd1\042\uffd1\043\uffd1\001\002\000\070\005\uffd5\006" +
    "\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\031\033\032\uffd5\033\037" +
    "\034\uffd5\035\020\040\021\041\015\042\035\043\023\001" +
    "\002\000\024\027\016\030\031\031\033\033\037\035\020" +
    "\040\021\041\015\042\035\043\023\001\002\000\004\040" +
    "\041\001\002\000\006\031\044\040\043\001\002\000\004" +
    "\005\ufff3\001\002\000\006\006\116\040\115\001\002\000" +
    "\004\040\110\001\002\000\004\006\046\001\002\000\024" +
    "\027\016\030\031\031\033\033\037\035\020\040\021\041" +
    "\015\042\035\043\023\001\002\000\020\005\ufff1\006\052" +
    "\010\053\011\051\012\054\013\050\014\055\001\002\000" +
    "\024\027\016\030\031\031\033\033\037\035\020\040\021" +
    "\041\015\042\035\043\023\001\002\000\024\027\016\030" +
    "\031\031\033\033\037\035\020\040\021\041\015\042\035" +
    "\043\023\001\002\000\024\027\016\030\031\031\033\033" +
    "\037\035\020\040\021\041\015\042\035\043\023\001\002" +
    "\000\024\027\016\030\031\031\033\033\037\035\020\040" +
    "\021\041\015\042\035\043\023\001\002\000\024\027\016" +
    "\030\031\031\033\033\037\035\020\040\021\041\015\042" +
    "\035\043\023\001\002\000\024\027\016\030\031\031\033" +
    "\033\037\035\020\040\021\041\015\042\035\043\023\001" +
    "\002\000\030\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\012\uffea\013\uffea\014\uffea\015\057\032\uffea\034\uffea\001" +
    "\002\000\024\027\016\030\031\031\033\033\037\035\020" +
    "\040\021\041\015\042\035\043\023\001\002\000\040\005" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\063\017\062\020\061\021\064\032" +
    "\uffe4\034\uffe4\001\002\000\024\027\016\030\031\031\033" +
    "\033\037\035\020\040\021\041\015\042\035\043\023\001" +
    "\002\000\024\027\016\030\031\031\033\033\037\035\020" +
    "\040\021\041\015\042\035\043\023\001\002\000\024\027" +
    "\016\030\031\031\033\033\037\035\020\040\021\041\015" +
    "\042\035\043\023\001\002\000\024\027\016\030\031\031" +
    "\033\033\037\035\020\040\021\041\015\042\035\043\023" +
    "\001\002\000\052\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011" +
    "\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\022\072\023\071\024\067\025\066\026" +
    "\070\032\uffdf\034\uffdf\001\002\000\024\027\016\030\031" +
    "\031\033\033\037\035\020\040\021\041\015\042\035\043" +
    "\023\001\002\000\024\027\016\030\031\031\033\033\037" +
    "\035\020\040\021\041\015\042\035\043\023\001\002\000" +
    "\024\027\016\030\031\031\033\033\037\035\020\040\021" +
    "\041\015\042\035\043\023\001\002\000\024\027\016\030" +
    "\031\031\033\033\037\035\020\040\021\041\015\042\035" +
    "\043\023\001\002\000\024\027\016\030\031\031\033\033" +
    "\037\035\020\040\021\041\015\042\035\043\023\001\002" +
    "\000\052\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012" +
    "\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd" +
    "\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\032" +
    "\uffdd\034\uffdd\001\002\000\052\005\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\026\uffdc\032\uffdc\034\uffdc\001\002\000\052\005" +
    "\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\032\uffd9\034\uffd9" +
    "\001\002\000\052\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb" +
    "\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\032\uffdb\034\uffdb\001\002\000\052\005\uffda\006\uffda" +
    "\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015" +
    "\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\032\uffda\034\uffda\001\002\000" +
    "\052\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\022\072\023\071\024\067\025\066\026\070\032\uffe2" +
    "\034\uffe2\001\002\000\052\005\uffe1\006\uffe1\007\uffe1\010" +
    "\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\021\uffe1\022\072\023\071\024\067\025" +
    "\066\026\070\032\uffe1\034\uffe1\001\002\000\052\005\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\072" +
    "\023\071\024\067\025\066\026\070\032\uffe0\034\uffe0\001" +
    "\002\000\030\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\015\057\032\uffeb\034\uffeb\001" +
    "\002\000\030\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\015\057\032\uffe7\034\uffe7\001" +
    "\002\000\030\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\015\057\032\uffe6\034\uffe6\001" +
    "\002\000\030\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\015\057\032\uffe9\034\uffe9\001" +
    "\002\000\030\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\015\057\032\uffe8\034\uffe8\001" +
    "\002\000\006\007\uffec\032\uffec\001\002\000\006\007\113" +
    "\032\112\001\002\000\004\006\uffee\001\002\000\004\040" +
    "\114\001\002\000\006\007\uffed\032\uffed\001\002\000\006" +
    "\006\116\040\115\001\002\000\024\027\016\030\031\031" +
    "\033\033\037\035\020\040\021\041\015\042\035\043\023" +
    "\001\002\000\004\005\ufff2\001\002\000\020\005\uffef\006" +
    "\052\010\053\011\051\012\054\013\050\014\055\001\002" +
    "\000\004\005\ufff0\001\002\000\022\006\052\007\uffc5\010" +
    "\053\011\051\012\054\013\050\014\055\034\uffc5\001\002" +
    "\000\006\007\124\034\125\001\002\000\024\027\016\030" +
    "\031\031\033\033\037\035\020\040\021\041\015\042\035" +
    "\043\023\001\002\000\070\005\uffc7\006\uffc7\007\uffc7\010" +
    "\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7" +
    "\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\026\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7" +
    "\040\uffc7\041\uffc7\042\uffc7\043\uffc7\001\002\000\022\006" +
    "\052\007\uffc6\010\053\011\051\012\054\013\050\014\055" +
    "\034\uffc6\001\002\000\070\005\uffd4\006\uffd4\007\uffd4\010" +
    "\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4" +
    "\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025" +
    "\uffd4\026\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\040\uffd4\041\uffd4\042\uffd4\043\uffd4\001\002\000\022\006" +
    "\052\007\132\010\053\011\051\012\054\013\050\014\055" +
    "\032\131\001\002\000\070\005\uffcd\006\uffcd\007\uffcd\010" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd" +
    "\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd" +
    "\040\uffcd\041\uffcd\042\uffcd\043\uffcd\001\002\000\024\027" +
    "\016\030\031\031\033\033\037\035\020\040\021\041\015" +
    "\042\035\043\023\001\002\000\006\007\136\032\135\001" +
    "\002\000\022\006\052\007\uffc8\010\053\011\051\012\054" +
    "\013\050\014\055\032\uffc8\001\002\000\070\005\uffca\006" +
    "\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca" +
    "\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023" +
    "\uffca\024\uffca\025\uffca\026\uffca\031\uffca\032\uffca\033\uffca" +
    "\034\uffca\035\uffca\040\uffca\041\uffca\042\uffca\043\uffca\001" +
    "\002\000\024\027\016\030\031\031\033\033\037\035\020" +
    "\040\021\041\015\042\035\043\023\001\002\000\022\006" +
    "\052\007\uffc9\010\053\011\051\012\054\013\050\014\055" +
    "\032\uffc9\001\002\000\070\005\uffd6\006\uffd6\007\uffd6\010" +
    "\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6" +
    "\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\026\uffd6\031\033\032\uffd6\033\037\034\uffd6\035\020" +
    "\040\021\041\015\042\035\043\023\001\002\000\032\004" +
    "\ufffb\027\ufffb\030\ufffb\031\ufffb\033\ufffb\035\ufffb\036\ufffb" +
    "\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\001\002\000" +
    "\004\002\ufffc\001\002\000\070\005\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\031\033\032\uffd7\033\037\034\uffd7\035" +
    "\020\040\021\041\015\042\035\043\023\001\002\000\004" +
    "\040\145\001\002\000\004\006\ufff7\001\002\000\004\006" +
    "\147\001\002\000\024\027\ufff6\030\ufff6\031\ufff6\033\ufff6" +
    "\035\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\001\002\000" +
    "\024\027\016\030\031\031\033\033\037\035\020\040\021" +
    "\041\015\042\035\043\023\001\002\000\020\005\ufff5\006" +
    "\052\010\053\011\051\012\054\013\050\014\055\001\002" +
    "\000\004\005\153\001\002\000\032\004\ufff9\027\ufff9\030" +
    "\ufff9\031\ufff9\033\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9" +
    "\041\ufff9\042\ufff9\043\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\010\003\005\025\004\026\003\001\001\000" +
    "\006\004\011\030\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\005" +
    "\151\012\021\013\027\014\024\015\033\016\023\017\035" +
    "\020\025\021\031\023\012\001\001\000\030\005\026\012" +
    "\021\013\027\014\024\015\033\016\023\017\035\020\025" +
    "\021\031\023\012\027\016\001\001\000\002\001\001\000" +
    "\004\031\143\001\001\000\002\001\001\000\012\017\142" +
    "\020\025\021\031\023\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\137" +
    "\020\025\021\031\023\012\001\001\000\002\001\001\000" +
    "\024\012\127\013\027\014\024\015\033\016\023\017\035" +
    "\020\025\021\031\023\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\020\126\021\031\023\012\001\001" +
    "\000\026\012\121\013\027\014\024\015\033\016\023\017" +
    "\035\020\025\021\031\023\012\024\122\001\001\000\004" +
    "\006\041\001\001\000\004\010\044\001\001\000\002\001" +
    "\001\000\004\007\116\001\001\000\004\011\110\001\001" +
    "\000\002\001\001\000\024\012\046\013\027\014\024\015" +
    "\033\016\023\017\035\020\025\021\031\023\012\001\001" +
    "\000\002\001\001\000\022\013\106\014\024\015\033\016" +
    "\023\017\035\020\025\021\031\023\012\001\001\000\022" +
    "\013\105\014\024\015\033\016\023\017\035\020\025\021" +
    "\031\023\012\001\001\000\022\013\104\014\024\015\033" +
    "\016\023\017\035\020\025\021\031\023\012\001\001\000" +
    "\022\013\103\014\024\015\033\016\023\017\035\020\025" +
    "\021\031\023\012\001\001\000\022\013\102\014\024\015" +
    "\033\016\023\017\035\020\025\021\031\023\012\001\001" +
    "\000\022\013\055\014\024\015\033\016\023\017\035\020" +
    "\025\021\031\023\012\001\001\000\002\001\001\000\020" +
    "\014\057\015\033\016\023\017\035\020\025\021\031\023" +
    "\012\001\001\000\002\001\001\000\016\015\101\016\023" +
    "\017\035\020\025\021\031\023\012\001\001\000\016\015" +
    "\100\016\023\017\035\020\025\021\031\023\012\001\001" +
    "\000\016\015\077\016\023\017\035\020\025\021\031\023" +
    "\012\001\001\000\016\015\064\016\023\017\035\020\025" +
    "\021\031\023\012\001\001\000\002\001\001\000\014\016" +
    "\076\017\035\020\025\021\031\023\012\001\001\000\014" +
    "\016\075\017\035\020\025\021\031\023\012\001\001\000" +
    "\014\016\074\017\035\020\025\021\031\023\012\001\001" +
    "\000\014\016\073\017\035\020\025\021\031\023\012\001" +
    "\001\000\014\016\072\017\035\020\025\021\031\023\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\120" +
    "\001\001\000\024\012\117\013\027\014\024\015\033\016" +
    "\023\017\035\020\025\021\031\023\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\012\125\013\027\014\024" +
    "\015\033\016\023\017\035\020\025\021\031\023\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\012\133\013" +
    "\027\014\024\015\033\016\023\017\035\020\025\021\031" +
    "\022\132\023\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\012\136\013\027\014\024" +
    "\015\033\016\023\017\035\020\025\021\031\023\012\001" +
    "\001\000\002\001\001\000\010\020\126\021\031\023\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\020" +
    "\126\021\031\023\012\001\001\000\002\001\001\000\004" +
    "\032\145\001\001\000\002\001\001\000\004\033\147\001" +
    "\001\000\024\012\150\013\027\014\024\015\033\016\023" +
    "\017\035\020\025\021\031\023\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[])
	{
		try
		{
			new parser(new Yylex(System.in)).parse();
		}
		catch (Exception e)
		{
			System.err.println(e.getMessage());
		}
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	Hashtable symbolTable;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // List2 ::= Exp_Rel 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*List2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // List2 ::= List2 COMA Exp_Rel 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*List2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // List ::= CORABRE List2 CORCIERRA 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*List*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Tuple2 ::= Exp_Rel 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*Tuple2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Tuple2 ::= Tuple2 COMA Exp_Rel 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*Tuple2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Tuple ::= PARABRE Exp_Rel COMA Tuple2 PARCIERRA 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*Tuple*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Exp_atom ::= List 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp_atom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Exp_atom ::= Tuple 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp_atom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Exp_atom ::= PARABRE Exp_Rel PARCIERRA 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp_atom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Exp_atom ::= NIL 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp_atom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Exp_atom ::= ID 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp_atom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Exp_atom ::= STRING 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp_atom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Exp_atom ::= REAL 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp_atom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Exp_atom ::= INT 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp_atom*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Exp_fun ::= Exp_atom 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp_fun*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp_fun ::= Exp_fun Exp_atom 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp_fun*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp_un ::= Exp_fun 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*Exp_un*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp_un ::= MINUS Exp_fun 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*Exp_un*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp_un ::= NOT Exp_fun 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*Exp_un*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp_mul ::= Exp_un 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp_mul*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp_mul ::= Exp_mul ANDALSO Exp_un 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp_mul*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp_mul ::= Exp_mul MOD Exp_un 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp_mul*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp_mul ::= Exp_mul DIVINT Exp_un 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp_mul*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp_mul ::= Exp_mul DIVREAL Exp_un 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp_mul*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp_mul ::= Exp_mul MUL Exp_un 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp_mul*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp_add ::= Exp_mul 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*Exp_add*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp_add ::= Exp_add CONCAT Exp_mul 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*Exp_add*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp_add ::= Exp_add ORELSE Exp_mul 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*Exp_add*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp_add ::= Exp_add RESTA Exp_mul 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*Exp_add*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp_add ::= Exp_add SUMA Exp_mul 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*Exp_add*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp_cons ::= Exp_add 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*Exp_cons*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp_cons ::= Exp_cons CONS Exp_add 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*Exp_cons*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp_Rel ::= Exp_cons 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*Exp_Rel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp_Rel ::= Exp_Rel IGUAL Exp_cons 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*Exp_Rel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp_Rel ::= Exp_Rel DISTINTO Exp_cons 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*Exp_Rel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp_Rel ::= Exp_Rel MAYORIGUAL Exp_cons 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*Exp_Rel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp_Rel ::= Exp_Rel MENORIGUAL Exp_cons 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*Exp_Rel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp_Rel ::= Exp_Rel MAYOR Exp_cons 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*Exp_Rel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Exp_Rel ::= Exp_Rel MENOR Exp_cons 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*Exp_Rel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TuplePattern2 ::= ID 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*TuplePattern2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TuplePattern2 ::= TuplePattern2 COMA ID 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*TuplePattern2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TuplePattern ::= PARABRE TuplePattern2 PARCIERRA 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*TuplePattern*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CurryingList ::= IGUAL Exp_Rel 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*CurryingList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CurryingList ::= ID CurryingList 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*CurryingList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MatchingFunc ::= ID TuplePattern IGUAL Exp_Rel 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*MatchingFunc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MatchingFunc ::= ID ID CurryingList 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*MatchingFunc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Sentencia ::= FUN MatchingFunc 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sentencia ::= Exp_Rel 
            {
              Attrs RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Sentencia ::= VAL NT$4 ID NT$5 IGUAL NT$6 Exp_Rel 
            {
              Attrs RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Attrs) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Attrs) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Attrs) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Rest of Exp_Rel found!"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$6 ::= 
            {
              Object RESULT = null;
 System.out.println("= found!"); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*NT$6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$5 ::= 
            {
              Object RESULT = null;
 System.out.println("ID found!"); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*NT$5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$4 ::= 
            {
              Object RESULT = null;
 System.out.println("VAL found!"); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*NT$4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Lista_sentencias ::= NT$3 Sentencia PTOCOMA 
            {
              Object RESULT = null;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("; found!"); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Lista_sentencias*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$3 ::= 
            {
              Object RESULT = null;
 System.out.println("Entrando a leer Sentencia"); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*NT$3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Lista_sentencias ::= Lista_sentencias Sentencia PTOCOMA 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*Lista_sentencias*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Programa ::= NT$1 Lista_sentencias NT$2 PUNTO 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("PUNTO found!"); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Programa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$2 ::= 
            {
              Object RESULT = null;
 System.out.println("Succesfully parsed!"); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT = null;
 	
					symbolTable=new Hashtable(); 
					System.out.println("Succesfully created symbol table!"); 
				
              CUP$parser$result = new java_cup.runtime.Symbol(20/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Programa EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= NT$0 PUNTO 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("PUTO EL QUE PUNTO"); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Programa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT = null;
 System.out.println("LEYENDO EL PUTO PUNTO"); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

