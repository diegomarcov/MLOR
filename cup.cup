import java_cup.runtime.*;
import java.io.*;
import java.util.*;


action code
{:
	Hashtable symbolTable;
:}

parser code 
{:
	public static void main(String args[])
	{
		try
		{
			new parser(new Yylex(System.in)).parse();
		}
		catch (Exception e)
		{
			System.err.println(e.getMessage());
		}
	}
:}

terminal Token PUNTO, PTOCOMA, IGUAL, COMA, OPREL, CONS, OPADD, ORELSE, CONCAT, MUL, DIVREAL, DIVINT, MOD, ANDALSO, NOT, MINUS, PARABRE, PARCIERRA, CORABRE, CORCIERRA, NIL, FUN, VAL, ID, INT, REAL, STRING;

non terminal Programa, Lista_sentencias;

non terminal Attrs Sentencia, MatchingFunc, CurryingList, TuplePattern, TuplePattern2, Exp_Rel, Exp_cons, Exp_add, Exp_mul, Exp_un, Exp_fun, Exp_atom, Tuple, Tuple2, List, List2;

Programa ::= 	{: 	
					symbolTable=new Hashtable(); 
					System.out.println("Succesfully created symbol table!"); 
				:} 
				Lista_sentencias 	{: System.out.println("Succesfully parsed!"); :} 
				PUNTO	{: System.out.println("PUNTO found!"); :} 
				;

Lista_sentencias ::= 	Lista_sentencias 
						Sentencia 
						PTOCOMA 
						| 
						{: System.out.println("Entrando a leer Sentencia"); :}
						Sentencia 
						PTOCOMA	{: System.out.println("; found!"); :}
						;

Sentencia ::= 	VAL {: System.out.println("VAL found!"); :}
				ID 	{: System.out.println("ID found!"); :}
				IGUAL 	{: System.out.println("= found!"); :}
				Exp_Rel {: System.out.println("Rest of Exp_Rel found!"); :}
				| 
				Exp_Rel 
				| 
				FUN 
				MatchingFunc;

MatchingFunc ::= ID ID CurryingList | ID TuplePattern IGUAL Exp_Rel;

CurryingList ::= ID CurryingList | IGUAL Exp_Rel;

TuplePattern ::= PARABRE TuplePattern2 PARCIERRA;

TuplePattern2 ::= TuplePattern2 COMA ID  | ID;

Exp_Rel  	::= Exp_Rel OPREL Exp_cons| Exp_Rel IGUAL Exp_cons | Exp_cons;
				
Exp_cons 	::=	Exp_cons CONS Exp_add | Exp_add;

Exp_add  	::=	Exp_add OPADD Exp_mul | 
				Exp_add ORELSE Exp_mul | Exp_add CONCAT Exp_mul | Exp_mul;

Exp_mul  	::=	Exp_mul MUL Exp_un | Exp_mul DIVREAL Exp_un | Exp_mul DIVINT Exp_un |
				Exp_mul MOD Exp_un | Exp_mul ANDALSO Exp_un | Exp_un;

Exp_un   	::=	NOT Exp_fun | MINUS Exp_fun | Exp_fun;

Exp_fun  	::= 	Exp_fun Exp_atom | Exp_atom;

Exp_atom	::=	INT:i {: RESULT = new Attrs("int") ;:}
				| 
				REAL:r {: RESULT = new Attrs("float") ;:} 
				| 
				STRING:s {: RESULT = new Attrs("string") ;:}
				| 
				ID:id 
				| 
				NIL {: RESULT = new Attrs("list") ;:}
				| 
				PARABRE 
				Exp_Rel 
				PARCIERRA 
				| 
				Tuple 
				| 
				List;

Tuple 	::= PARABRE Exp_Rel COMA Tuple2 PARCIERRA;

Tuple2 	::= Tuple2 COMA Exp_Rel | Exp_Rel;

List 		::= CORABRE List2 CORCIERRA;

List2 	::= List2 COMA Exp_Rel | Exp_Rel;